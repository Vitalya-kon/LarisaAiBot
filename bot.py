import json
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction, ParseMode
from telegram.error import BadRequest
import config
import asyncio
import re

user_sessions = {}
status_messages = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–∞—Ä–∏—Å–∞. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–∏—Ö.")
# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def split_long_message(text: str, max_length: int = 4096):
    return [text[i:i+max_length] for i in range(0, len(text), max_length)]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_message = update.message.text
    chat_id = update.message.chat_id

     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    status_message = await update.message.reply_text(
        "‚è≥ *–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..*",
        parse_mode=ParseMode.MARKDOWN
    )
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_sessions:
        user_sessions[user_id] = []
    
    user_sessions[user_id].append({"role": "user", "content": user_message})

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await update.message.chat.send_action(action=ChatAction.TYPING)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    status_messages[user_id] = {
        'message_id': status_message.message_id,
        'chat_id': chat_id,
        'active': True
    }
    
     # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    loading_task = asyncio.create_task(show_loading_animation(update, chat_id, user_id))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
    headers = {
        "Authorization": f"Bearer {config.OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": config.MODEL,
        "messages": user_sessions[user_id][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload),
                timeout=30
            )
        )

         # –ü–æ–º–µ—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
        if user_id in status_messages:
            status_messages[user_id]['active'] = False
        
        # –î–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.sleep(0.5)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_id in status_messages:
            try:
                await context.bot.delete_message(
                    chat_id=chat_id, 
                    message_id=status_messages[user_id]['message_id']
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            finally:
                del status_messages[user_id]
        
        if response.status_code == 200:
            ai_response = response.json()['choices'][0]['message']['content']

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_response = format_ai_response(ai_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            await send_formatted_message(update, formatted_response)

        else:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ API* (–∫–æ–¥ {response.status_code})"
            if response.text:
                try:
                    error_data = response.json()
                    error_details = error_data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    error_msg += f"\n\n`{error_details[:200]}...`"
                except:
                    error_msg += f"\n\n`{response.text[:200]}...`"
            await update.message.reply_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            
    except Exception as e:
        # –ü–æ–º–µ—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if user_id in status_messages:
            status_messages[user_id]['active'] = False
        
        # –î–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.sleep(0.5)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_id in status_messages:
            try:
                await context.bot.delete_message(
                    chat_id=chat_id, 
                    message_id=status_messages[user_id]['message_id']
                )
            except:
                pass
            finally:
                del status_messages[user_id]

        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `{str(e)}`", parse_mode=ParseMode.MARKDOWN)

async def send_formatted_message(update, text):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    if len(text) > 4096:
        # –ò—â–µ–º —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞)
        parts = []
        while len(text) > 4096:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ 4096 —Å–∏–º–≤–æ–ª–æ–º
            split_pos = text[:4096].rfind('\n')
            if split_pos == -1:
                split_pos = 4096
            parts.append(text[:split_pos])
            text = text[split_pos:].lstrip()
        parts.append(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        for i, part in enumerate(parts):
            if i > 0:  # –î–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
                await update.message.chat.send_action(action=ChatAction.TYPING)
                await asyncio.sleep(0.5)
            
            try:
                await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
            except BadRequest:
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                await update.message.reply_text(part)
    else:
        try:
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
        except BadRequest:
            await update.message.reply_text(text)

async def show_loading_animation(update: Update, chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏, –æ–±–Ω–æ–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã"""
    loading_frames = [
        "‚è≥ *–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..*",
        "‚è≥ *–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*",
        "‚è≥ *–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ....*",
        "‚è≥ *–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.....*"
    ]
    
    frame_index = 0
    
    while user_id in status_messages and status_messages[user_id]['active']:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–∞–¥—Ä–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            await update.get_bot().edit_message_text(
                chat_id=chat_id,
                message_id=status_messages[user_id]['message_id'],
                text=loading_frames[frame_index],
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É
            frame_index = (frame_index + 1) % len(loading_frames)
        except BadRequest as e:
            if "message not modified" in str(e).lower():
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message not modified"
                pass
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                break
        except Exception as e:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            break
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await asyncio.sleep(1.5)

def format_ai_response(text):
    # –ó–∞–º–µ–Ω—è–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ Telegram-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é
    text = re.sub(r'### (.*?)', r'üü¢ *\1*', text)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
    text = re.sub(r'## (.*?)', r'üî∑ *\1*', text)   # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    text = re.sub(r'\*\*(.*?)\*\*', r'*\1*', text) # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'_(.*?)_', r'_\1_', text)       # –ö—É—Ä—Å–∏–≤
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    text = re.sub(r'^\* (.*?)$', r'üëâ \1', text, flags=re.MULTILINE)
    text = re.sub(r'^‚Ä¢ (.*?)$', r'‚ú® \1', text, flags=re.MULTILINE)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    text = re.sub(r'^---$', '‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨', text, flags=re.MULTILINE)
    
    return text

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.MARKDOWN
        )

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_sessions:
        user_sessions[user_id] = []
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("clear", clear_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()